// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dwt_cpp
arma::field<arma::vec> dwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP wv_dwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    rcpp_result_gen = Rcpp::wrap(dwt_cpp(x, filter_name, nlevels, boundary, brickwall));
    return rcpp_result_gen;
END_RCPP
}
// modwt_cpp
arma::field<arma::vec> modwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP wv_modwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt_cpp(x, filter_name, nlevels, boundary, brickwall));
    return rcpp_result_gen;
END_RCPP
}
// psi_tuk
arma::vec psi_tuk(const arma::vec& x, double sig2_bw, double crob_bw);
RcppExport SEXP wv_psi_tuk(SEXP xSEXP, SEXP sig2_bwSEXP, SEXP crob_bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sig2_bw(sig2_bwSEXP);
    Rcpp::traits::input_parameter< double >::type crob_bw(crob_bwSEXP);
    rcpp_result_gen = Rcpp::wrap(psi_tuk(x, sig2_bw, crob_bw));
    return rcpp_result_gen;
END_RCPP
}
// der_psi_tuk
arma::vec der_psi_tuk(const arma::vec& x, double sig2_bw, double crob_bw);
RcppExport SEXP wv_der_psi_tuk(SEXP xSEXP, SEXP sig2_bwSEXP, SEXP crob_bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type sig2_bw(sig2_bwSEXP);
    Rcpp::traits::input_parameter< double >::type crob_bw(crob_bwSEXP);
    rcpp_result_gen = Rcpp::wrap(der_psi_tuk(x, sig2_bw, crob_bw));
    return rcpp_result_gen;
END_RCPP
}
// hfilter
arma::vec hfilter(int jscale);
RcppExport SEXP wv_hfilter(SEXP jscaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type jscale(jscaleSEXP);
    rcpp_result_gen = Rcpp::wrap(hfilter(jscale));
    return rcpp_result_gen;
END_RCPP
}
// sp_wv_coeffs
arma::field<arma::vec> sp_wv_coeffs(const arma::mat& X, int J1, int J2);
RcppExport SEXP wv_sp_wv_coeffs(SEXP XSEXP, SEXP J1SEXP, SEXP J2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type J1(J1SEXP);
    Rcpp::traits::input_parameter< int >::type J2(J2SEXP);
    rcpp_result_gen = Rcpp::wrap(sp_wv_coeffs(X, J1, J2));
    return rcpp_result_gen;
END_RCPP
}
// sp_wvar_cpp
arma::field<arma::mat> sp_wvar_cpp(const arma::field<arma::vec>& wv_coeffs, int n, int m, int J1, int J2, bool iso, bool robust, double eff);
RcppExport SEXP wv_sp_wvar_cpp(SEXP wv_coeffsSEXP, SEXP nSEXP, SEXP mSEXP, SEXP J1SEXP, SEXP J2SEXP, SEXP isoSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type wv_coeffs(wv_coeffsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type J1(J1SEXP);
    Rcpp::traits::input_parameter< int >::type J2(J2SEXP);
    Rcpp::traits::input_parameter< bool >::type iso(isoSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    rcpp_result_gen = Rcpp::wrap(sp_wvar_cpp(wv_coeffs, n, m, J1, J2, iso, robust, eff));
    return rcpp_result_gen;
END_RCPP
}
// spat_wavar
arma::field<arma::mat> spat_wavar(const arma::mat& X, int J1, int J2, bool iso, bool robust, double eff);
RcppExport SEXP wv_spat_wavar(SEXP XSEXP, SEXP J1SEXP, SEXP J2SEXP, SEXP isoSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type J1(J1SEXP);
    Rcpp::traits::input_parameter< int >::type J2(J2SEXP);
    Rcpp::traits::input_parameter< bool >::type iso(isoSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    rcpp_result_gen = Rcpp::wrap(spat_wavar(X, J1, J2, iso, robust, eff));
    return rcpp_result_gen;
END_RCPP
}
// make_wv_iso
arma::mat make_wv_iso(arma::mat wv, int min_dim);
RcppExport SEXP wv_make_wv_iso(SEXP wvSEXP, SEXP min_dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type wv(wvSEXP);
    Rcpp::traits::input_parameter< int >::type min_dim(min_dimSEXP);
    rcpp_result_gen = Rcpp::wrap(make_wv_iso(wv, min_dim));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix_parallel
arma::mat subset_matrix_parallel(const arma::mat& x, const arma::uvec y);
RcppExport SEXP wv_subset_matrix_parallel(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix_parallel(x, y));
    return rcpp_result_gen;
END_RCPP
}
// index_mat
arma::umat index_mat(int m, int n, std::string ftype);
RcppExport SEXP wv_index_mat(SEXP mSEXP, SEXP nSEXP, SEXP ftypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::string >::type ftype(ftypeSEXP);
    rcpp_result_gen = Rcpp::wrap(index_mat(m, n, ftype));
    return rcpp_result_gen;
END_RCPP
}
// lower_tri_elem
arma::vec lower_tri_elem(const arma::mat& X);
RcppExport SEXP wv_lower_tri_elem(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_tri_elem(X));
    return rcpp_result_gen;
END_RCPP
}
