// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sort_mat
arma::mat sort_mat(arma::mat x, unsigned int col);
RcppExport SEXP gmwm2_sort_mat(SEXP xSEXP, SEXP colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type col(colSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_mat(x, col));
    return rcpp_result_gen;
END_RCPP
}
// rev_col_subset
arma::mat rev_col_subset(arma::mat x, unsigned int start, unsigned int end);
RcppExport SEXP gmwm2_rev_col_subset(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(rev_col_subset(x, start, end));
    return rcpp_result_gen;
END_RCPP
}
// rev_row_subset
arma::mat rev_row_subset(arma::mat x, unsigned int start, unsigned int end);
RcppExport SEXP gmwm2_rev_row_subset(SEXP xSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(rev_row_subset(x, start, end));
    return rcpp_result_gen;
END_RCPP
}
// reverse_vec
arma::vec reverse_vec(arma::vec x);
RcppExport SEXP gmwm2_reverse_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(reverse_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// field_to_matrix
arma::mat field_to_matrix(arma::field<arma::vec> x);
RcppExport SEXP gmwm2_field_to_matrix(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(field_to_matrix(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_field_vec
double sum_field_vec(const arma::field<arma::vec>& x);
RcppExport SEXP gmwm2_sum_field_vec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_field_vec(x));
    return rcpp_result_gen;
END_RCPP
}
// dwt_cpp
arma::field<arma::vec> dwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP gmwm2_dwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    rcpp_result_gen = Rcpp::wrap(dwt_cpp(x, filter_name, nlevels, boundary, brickwall));
    return rcpp_result_gen;
END_RCPP
}
// modwt_cpp
arma::field<arma::vec> modwt_cpp(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP gmwm2_modwt_cpp(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt_cpp(x, filter_name, nlevels, boundary, brickwall));
    return rcpp_result_gen;
END_RCPP
}
// modwt_cpp_bw
arma::field<arma::vec> modwt_cpp_bw(arma::vec x, std::string filter_name, unsigned int nlevels, std::string boundary, bool brickwall);
RcppExport SEXP gmwm2_modwt_cpp_bw(SEXP xSEXP, SEXP filter_nameSEXP, SEXP nlevelsSEXP, SEXP boundarySEXP, SEXP brickwallSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< std::string >::type boundary(boundarySEXP);
    Rcpp::traits::input_parameter< bool >::type brickwall(brickwallSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt_cpp_bw(x, filter_name, nlevels, boundary, brickwall));
    return rcpp_result_gen;
END_RCPP
}
// brick_wall
arma::field<arma::vec> brick_wall(arma::field<arma::vec> x, arma::field<arma::vec> wave_filter, std::string method);
RcppExport SEXP gmwm2_brick_wall(SEXP xSEXP, SEXP wave_filterSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::vec> >::type wave_filter(wave_filterSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(brick_wall(x, wave_filter, method));
    return rcpp_result_gen;
END_RCPP
}
// wave_variance
arma::vec wave_variance(const arma::field<arma::vec>& signal_modwt_bw, bool robust, double eff);
RcppExport SEXP gmwm2_wave_variance(SEXP signal_modwt_bwSEXP, SEXP robustSEXP, SEXP effSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    rcpp_result_gen = Rcpp::wrap(wave_variance(signal_modwt_bw, robust, eff));
    return rcpp_result_gen;
END_RCPP
}
// wvar_cpp
arma::mat wvar_cpp(const arma::field<arma::vec>& signal_modwt_bw, bool robust, double eff, double alpha, std::string ci_type);
RcppExport SEXP gmwm2_wvar_cpp(SEXP signal_modwt_bwSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::field<arma::vec>& >::type signal_modwt_bw(signal_modwt_bwSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(wvar_cpp(signal_modwt_bw, robust, eff, alpha, ci_type));
    return rcpp_result_gen;
END_RCPP
}
// modwt_wvar_cpp
arma::mat modwt_wvar_cpp(const arma::vec& signal, unsigned int nlevels, bool robust, double eff, double alpha, std::string ci_type, std::string strWavelet, std::string decomp);
RcppExport SEXP gmwm2_modwt_wvar_cpp(SEXP signalSEXP, SEXP nlevelsSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP, SEXP strWaveletSEXP, SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type strWavelet(strWaveletSEXP);
    Rcpp::traits::input_parameter< std::string >::type decomp(decompSEXP);
    rcpp_result_gen = Rcpp::wrap(modwt_wvar_cpp(signal, nlevels, robust, eff, alpha, ci_type, strWavelet, decomp));
    return rcpp_result_gen;
END_RCPP
}
// batch_modwt_wvar_cpp
arma::field<arma::mat> batch_modwt_wvar_cpp(const arma::mat& signal, unsigned int nlevels, bool robust, double eff, double alpha, std::string ci_type, std::string strWavelet, std::string decomp);
RcppExport SEXP gmwm2_batch_modwt_wvar_cpp(SEXP signalSEXP, SEXP nlevelsSEXP, SEXP robustSEXP, SEXP effSEXP, SEXP alphaSEXP, SEXP ci_typeSEXP, SEXP strWaveletSEXP, SEXP decompSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nlevels(nlevelsSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    Rcpp::traits::input_parameter< double >::type eff(effSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type ci_type(ci_typeSEXP);
    Rcpp::traits::input_parameter< std::string >::type strWavelet(strWaveletSEXP);
    Rcpp::traits::input_parameter< std::string >::type decomp(decompSEXP);
    rcpp_result_gen = Rcpp::wrap(batch_modwt_wvar_cpp(signal, nlevels, robust, eff, alpha, ci_type, strWavelet, decomp));
    return rcpp_result_gen;
END_RCPP
}
// scales_cpp
arma::vec scales_cpp(unsigned int nb_level);
RcppExport SEXP gmwm2_scales_cpp(SEXP nb_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type nb_level(nb_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(scales_cpp(nb_level));
    return rcpp_result_gen;
END_RCPP
}
// qmf
arma::vec qmf(arma::vec g, bool inverse);
RcppExport SEXP gmwm2_qmf(SEXP gSEXP, SEXP inverseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type g(gSEXP);
    Rcpp::traits::input_parameter< bool >::type inverse(inverseSEXP);
    rcpp_result_gen = Rcpp::wrap(qmf(g, inverse));
    return rcpp_result_gen;
END_RCPP
}
// haar_filter
arma::field<arma::vec> haar_filter();
RcppExport SEXP gmwm2_haar_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(haar_filter());
    return rcpp_result_gen;
END_RCPP
}
// d4_filter
arma::field<arma::vec> d4_filter();
RcppExport SEXP gmwm2_d4_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(d4_filter());
    return rcpp_result_gen;
END_RCPP
}
// mb4_filter
arma::field<arma::vec> mb4_filter();
RcppExport SEXP gmwm2_mb4_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mb4_filter());
    return rcpp_result_gen;
END_RCPP
}
// w4_filter
arma::field<arma::vec> w4_filter();
RcppExport SEXP gmwm2_w4_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(w4_filter());
    return rcpp_result_gen;
END_RCPP
}
// fk4_filter
arma::field<arma::vec> fk4_filter();
RcppExport SEXP gmwm2_fk4_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fk4_filter());
    return rcpp_result_gen;
END_RCPP
}
// d6_filter
arma::field<arma::vec> d6_filter();
RcppExport SEXP gmwm2_d6_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(d6_filter());
    return rcpp_result_gen;
END_RCPP
}
// fk6_filter
arma::field<arma::vec> fk6_filter();
RcppExport SEXP gmwm2_fk6_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fk6_filter());
    return rcpp_result_gen;
END_RCPP
}
// d8_filter
arma::field<arma::vec> d8_filter();
RcppExport SEXP gmwm2_d8_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(d8_filter());
    return rcpp_result_gen;
END_RCPP
}
// fk8_filter
arma::field<arma::vec> fk8_filter();
RcppExport SEXP gmwm2_fk8_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fk8_filter());
    return rcpp_result_gen;
END_RCPP
}
// la8_filter
arma::field<arma::vec> la8_filter();
RcppExport SEXP gmwm2_la8_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(la8_filter());
    return rcpp_result_gen;
END_RCPP
}
// mb8_filter
arma::field<arma::vec> mb8_filter();
RcppExport SEXP gmwm2_mb8_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mb8_filter());
    return rcpp_result_gen;
END_RCPP
}
// bl14_filter
arma::field<arma::vec> bl14_filter();
RcppExport SEXP gmwm2_bl14_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(bl14_filter());
    return rcpp_result_gen;
END_RCPP
}
// fk14_filter
arma::field<arma::vec> fk14_filter();
RcppExport SEXP gmwm2_fk14_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fk14_filter());
    return rcpp_result_gen;
END_RCPP
}
// d16_filter
arma::field<arma::vec> d16_filter();
RcppExport SEXP gmwm2_d16_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(d16_filter());
    return rcpp_result_gen;
END_RCPP
}
// la16_filter
arma::field<arma::vec> la16_filter();
RcppExport SEXP gmwm2_la16_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(la16_filter());
    return rcpp_result_gen;
END_RCPP
}
// mb16_filter
arma::field<arma::vec> mb16_filter();
RcppExport SEXP gmwm2_mb16_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mb16_filter());
    return rcpp_result_gen;
END_RCPP
}
// la20_filter
arma::field<arma::vec> la20_filter();
RcppExport SEXP gmwm2_la20_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(la20_filter());
    return rcpp_result_gen;
END_RCPP
}
// bl20_filter
arma::field<arma::vec> bl20_filter();
RcppExport SEXP gmwm2_bl20_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(bl20_filter());
    return rcpp_result_gen;
END_RCPP
}
// fk22_filter
arma::field<arma::vec> fk22_filter();
RcppExport SEXP gmwm2_fk22_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fk22_filter());
    return rcpp_result_gen;
END_RCPP
}
// mb24_filter
arma::field<arma::vec> mb24_filter();
RcppExport SEXP gmwm2_mb24_filter() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(mb24_filter());
    return rcpp_result_gen;
END_RCPP
}
// select_filter
arma::field<arma::vec> select_filter(std::string filter_name);
RcppExport SEXP gmwm2_select_filter(SEXP filter_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filter_name(filter_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(select_filter(filter_name));
    return rcpp_result_gen;
END_RCPP
}
